/* 2025_v1 */

drop table reservas;
drop table pistas;
drop sequence seq_pistas;

/* ¿Por qué en las comparacionesde fecha en Oracle conviene utilizar la función trunc?
En oracle se usa trunc para usar solo la fecha si no un tipo de dato DATE incluye fecha y hora, podemos tener problemas a la hora de trabajar con ellos.

¿Qué es sql%rowcount y cómo funciona?
Variable de PL/SQL que devuelve el número de filas afectadas por la última instrucción INSERT, UPDATE o DELETE.


¿Qué es una variable de tipo cursor?. ¿Qué variable de tipo cursor hay en la segunda
función?. ¿Qué efecto tienen las operaciones open, fetch y close?. ¿Qué valores toman
las propiedades de cursor FOUND y NOTFOUND y en qué caso?

Una variable de tipo cursor en PL/SQL es un mecanismo que permite recorrer los resultados de una consulta fila por fila.
En la función reservarPista, la variable de tipo cursor es vPistasLibres.
OPEN -> Deja los datos listos para ser leídos.
FETCH-> Comprueba que hay algún dato en el cursor.ç
CLOSE-> Libera la memoria.

Found y NotFound indican el estado del cursor despues de un fetch
FOUND-> a true si hay datos o false si no los hay.
NOTFOUND-> a false si hay datos y a true si no los hay.

 En la función anularReserva discute si da lo mismo sustituir el rollback por un commit por qué
No es lo mismo ya que el commit confirmaría los cambios y el rollback deshace los cambios realizados. En este caso si no encuentra fila y hacemos Commit estariamos confirmando la transacción lo 
que puede no ser optimo. 


En la función reservarPista investiga si la transacción se puede quedar abierta en algún
caso. Haz el arreglo correspondiente para que esto no ocurra.
Veo que se cierra bien salvo y cuando se inserte un valor incorrecto en la fila "INSERT INTO reservas VALUES (vPista, p_fecha, p_hora, p_socio);" ya sea pista, fecha, hora o socio. 


*/



create table pistas (
	nro integer primary key
	);
	
create table reservas (
	pista integer references pistas(nro),
	fecha date,
	hora integer check (hora >= 0 and hora <= 23),
	socio varchar(20),
	primary key (pista, fecha, hora)
	);
	
create sequence seq_pistas;

insert into pistas values (seq_pistas.nextval);
insert into reservas 
	values (seq_pistas.currval, '20/03/2018', 14, 'Pepito');
insert into pistas values (seq_pistas.nextval);
insert into reservas 
	values (seq_pistas.currval, '24/03/2018', 18, 'Pepito');
insert into reservas 
	values (seq_pistas.currval, '21/03/2018', 14, 'Juan');
insert into pistas values (seq_pistas.nextval);
insert into reservas 
	values (seq_pistas.currval, '22/03/2018', 13, 'Lola');
insert into reservas 
	values (seq_pistas.currval, '22/03/2018', 12, 'Pepito');

commit;

create or replace function anularReserva( 
	p_socio varchar,
	p_fecha date,
	p_hora integer, 
	p_pista integer ) 
return integer is

begin
	DELETE FROM reservas 
        WHERE
            trunc(fecha) = trunc(p_fecha) AND
            pista = p_pista AND
            hora = p_hora AND
            socio = p_socio;

	if sql%rowcount = 1 then
		commit;
		return 1;
	else
		rollback;
		return 0;
	end if;
end;
/

create or replace FUNCTION reservarPista(
        p_socio VARCHAR,
        p_fecha DATE,
        p_hora INTEGER
    ) 
RETURN INTEGER IS

    CURSOR vPistasLibres IS
        SELECT nro
        FROM pistas 
        WHERE nro NOT IN (
            SELECT pista
            FROM reservas
            WHERE 
                trunc(fecha) = trunc(p_fecha) AND
                hora = p_hora)
        order by nro;
            
    vPista INTEGER;
	
    vSocioExistente INTEGER;

BEGIN
    SELECT COUNT(*) INTO vSocioExistente
    FROM socios
    WHERE socio_id = p_socio;

    IF vSocioExistente = 0 THEN
        RETURN 0;
    END IF;

    OPEN vPistasLibres;
    FETCH vPistasLibres INTO vPista;

    IF vPistasLibres%NOTFOUND
    THEN
        CLOSE vPistasLibres;
        RETURN 0;
    END IF;

    INSERT INTO reservas VALUES (vPista, p_fecha, p_hora, p_socio);
    CLOSE vPistasLibres;
    COMMIT;
    RETURN 1;
END;
/

/*
SET SERVEROUTPUT ON
declare
 resultado integer;
begin
 
     resultado := reservarPista( 'Socio 1', CURRENT_DATE, 12 );
     if resultado=1 then
        dbms_output.put_line('Reserva 1: OK');
     else
        dbms_output.put_line('Reserva 1: MAL');
     end if;
     
     --Continua tu solo....
     
      
    resultado := anularreserva( 'Socio 1', CURRENT_DATE, 12, 1);
     if resultado=1 then
        dbms_output.put_line('Reserva 1 anulada: OK');
     else
        dbms_output.put_line('Reserva 1 anulada: MAL');
     end if;
  
     resultado := anularreserva( 'Socio 1', date '1920-1-1', 12, 1);
     --Continua tu solo....
  
end;

/* Paso 2. Ejercicio 1 programación*/

SET SERVEROUTPUT ON
DECLARE
    resultado INTEGER;
BEGIN
    resultado := reservarPista( 'Socio 1', CURRENT_DATE, 12 );
    IF resultado = 1 THEN
        DBMS_OUTPUT.put_line('Reserva 1: OK');
    ELSE
        DBMS_OUTPUT.put_line('Reserva 1: MAL');
    END IF;
    
    resultado := reservarPista( 'Socio 2', CURRENT_DATE, 12 );
    IF resultado = 1 THEN
        DBMS_OUTPUT.put_line('Reserva 2: OK');
    ELSE
        DBMS_OUTPUT.put_line('Reserva 2: MAL');
    END IF;
    
    resultado := reservarPista( 'Socio 3', CURRENT_DATE, 12 );
    IF resultado = 1 THEN
        DBMS_OUTPUT.put_line('Reserva 3: OK');
    ELSE
        DBMS_OUTPUT.put_line('Reserva 3: MAL');
    END IF;
    resultado := reservarPista( 'Socio 4', CURRENT_DATE, 12 );
    IF resultado = 1 THEN
        DBMS_OUTPUT.put_line('Reserva 4: OK');
    ELSE
        DBMS_OUTPUT.put_line('Reserva 4: MAL');
    END IF;
END;
/
/
*/

